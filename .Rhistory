cov(attenu$mag, efit$residuals)
cov(attenu$dist, efit$residuals)
library(UsingR)
data(diamond)
plot(diamond$carat, diamond$price)
plot(diamond$carat, diamond$price,
xlab="Mass (carats)",
ylab="Price (SIN $)"
,
bg = "lightblue",
col="black", cex=1.1, pch=21, frame=FALSE)
abline(lm(price ~carat, data=diamond), lwd=2)
abline?
)
?abline
?lm
View(diamond)
fit <- lm(price ~ carat, data-diamond)
fit <- lm(price ~ carat, data=diamond)
coef(fit)
fit2 <- lm(price ~ I(carat - mean(carat)), data=diamond)
coef(fit2)
?I
abline(fit2, lwd=2)
newx <- c(.16, .27, .34)
coef(fit)[1] + coef(fit)[2] * newx
predict(fit, newdata=data.frame(carat=newx))
y <- diamond$price; x<- diamond$carat
n <- length(y)
fit <- lm(y~x)
e <- resid(fit)
fit
e
sum(e)
yhat <- predict(fit)
yhat
?resid
e
fit
y
x
max(abs(e-(y-yhat)))
x <- runif(100, -3, 3)
x
y<- x+sin(x) + rnorm(100,sd=.2)
plot(x,y)
abline(lim(y~x))
abline(lm(y~x))
y <- diamond$price; x<- diamond$carat; n<- length(y)
fit <- lm(y~x)
summary(fit)$sigma
sqrt(sum(resid(fit)^2/(n-2)))
library(UsingR)
data(diamond)
y<-diamond$price;x<-diamond$carat;n<-length(y)
beta1<-cor(y,x) * sd(y) / sd(x)
beta0<-mean(y) - beta1 * mean(x)
e<-y-beta0 - beta1 * x
sigma<-sqrt(sum(e^2) / (n-2))
ssx <- sum((x-mean(x))^2)
sBeta0 <- (1/n _ mean(x)^2/ssx)^.5 * sigma
sBeta0 <- (1/n + mean(x)^2/ssx)^.5 * sigma
seBeta1 <- sigma / sqrt(ssx)
tBeta0 <- beta0 / seBeta0; tBeta1 <- beta1 / seBeta1
tBeta0 <- beta0 / sBeta0; tBeta1 <- beta1 / seBeta1
seBeta0 <- sBeta0
rm sBeta0
rm(sBeta0)
pBeta0 <- 2 * pt(abs(tBeta0), df=n-2,lower.tail=FALSE)
pBeta1 <- 2*pt(abs(tBeta1), df=n-2, lower.tail=FALSE)
?pt
coefTable <- rbind(c(beta0, seBeta0, tBeta0,pBeta0), c(beta1,seBeta1,tBeta1,pBeta1))
colnames(coefTable) <- c("Estimate", "Std.Error", "t value", "P(>|t|)")
rownames(coefTable) <- c("(Intercept)", "x")
coefTable
fit<- lm(y~x)
summary(fit)$coefficients
fit
summary(fit)
sumCoef <- summary(fit)$coefficients
sumCoef
sumCoef[1,1] + c(-1,1) * qt(.975, df=fit$df) * sumCoef-1,2
sumCoef[1,1] + c(-1,1) * qt(.975, df=fit$df) * sumCoef[-1,2]
sumCoef[1,1] + c(-1,1) * qt(.975, df=fit$df) * sumCoef[1,2]
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
q1_fit <- lm(x~y)
q1_fit
summary(q1_fit)
resid(q1_fit)
sd(resid(q1_fit))
sd(resid(q1_fit))
q1_fit <- lm(y~x)
q1_fit
summary(q1_fit)
n <- 100;x<-rnorm(n);x2<-rnorm(n);x3<-rnorm(n)
y<- x+x2 + x3 + rnorm(n,sd=.1)
e<- function(a,b) a-sum(a*b) / sum(b^2) * b
ey <- e(e(y,x2), e(x3*2))
ey <- e(e(y,x2), e(x3,2))
ex <- e(e(x,x2), 3(x3,x2))
ex <- e(e(x,x2), e(x3,x2))
sum(ey*ex) / sum(ex^2)
coef(lm(y~x+x2+x3-1))
library(swirl)
swirl()
onex <- rep(1,nrow(galton))
ones <- rep(1,nrow(galton))
lm(child~ones + parent -1,galton)
lm(child~parent,galton)
lm(child~1, galton)
head(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~ Height+Constant-1, trees2
)
lapply(list(fit,fit2),coef)
library(UsingR)
dataset(mtcars)
data(mtcars)
lm(mpg,weight,mtcars)
view(mtcars)
summary(mtcars)
lm(mpg~weight)
lm(mpg~weight, data=mtcars)
View(mtcars)
lm(mpg~wt, data=mtcars)
fit <- lm(mpg~wt,mtcars)
fit
summary(fit)
predict(fit,mean(mtcars$mpg))
predict(fit,mean(mtcars$mpg),interval="confidence")
predict(fit,data.frame(x=mean(mtcars$mpg)),interval="confidence")
predict(fit,data.frame(wt=mean(mtcars$mpg)),interval="confidence")
predict(fit,data.frame(mpg=mean(mtcars$mpg)),interval="confidence")
predict(fit,data.frame(x=mean(mtcars$wt)),interval="confidence")
predict(fit,data.frame(wt=mean(mtcars$wt)),interval="confidence")
?mtcars
predict(fit,data.frame(wt=3), interval="prediction")
fit2 <- lm(y~I(wt/2))
fit2 <- lm(mpg~I(wt/2))
fit2 <- lm(mpg~I(wt/2),mtcars)
tbl2<-summary(fit2)$coefficients
mn<-tbl2[2,1]
deg_fr<-fit2$df
mn+c(-1,1)*qt(0.975,df=deg_fr) * std_err
std_err<- tbl2[2,2]
mn+c(-1,1)*qt(0.975,df=deg_fr) * std_err
tbl2
data(mtcars)
summary(cars)
view(cars)
view(cars)
cars
mtcars
View(mtcars)
View(mtcars)
lm(mpg~am)
mean(mpg)
mean(cars$mpg)
mean(mtcars$mpg)
library(datasets)
data(swiss)
require(stats)
require(graphics)
par(swiss,panel = panel.smooth, main="Swiss data", col=3+(swiss$Catholic>50))
pairs(swiss,panel = panel.smooth, main="Swiss data", col=3+(swiss$Catholic>50))
require(stats)
require(graphics)
data(mtcars)
summary(cars)
cars
mtcars
View(mtcars)
lm(mpg ~ am)
lm(mpg ~ am, mtcars)
fit <-lm(mpg ~ am, mtcars)
fit
summary(fit)
mtCars_cyl <- which(mtcars$cyl=6)
mtCars_cyl <- which(mtcars$cyl==6)
par(mtcars,panel = panel.smooth, main="MTCars data", col=3)
par(mtcars,panel = panel.smooth, main="MTCars data", col=11)
par(mtcars,panel = panel.smooth, mpg="MTCars data", col=11)
par(mtcars,panel = panel.smooth, main="MTCars data", col=11)
pairs(mtcars,panel = panel.smooth, main="MTCars data", col=11)
mtcar_cyl6 <- which(mtcars$cyl==6)
mtcar_cyl8 <- which(mtcars$cyl==8)
mtcar_cyl4 <- which(mtcars$cyl==4)
pairs(mtcars4,panel = panel.smooth, main="MTCars data", col=11)
pairs(mtcar_cyl4,panel = panel.smooth, main="MTCars data", col=11)
pairs(mtcar_cyl4,panel = panel.smooth, main="MTCars data", col=10)
mtcars_cyl6
mtcar_cyl6
mtcar_cyl4 <- mtcars[which(mtcars$cyl==4),]
mtcar_cyl4
mtcar_cyl6 <- mtcars[which(mtcars$cyl==6),]
mtcar_cyl8 <- mtcars[which(mtcars$cyl==8),]
pairs(mtcar_cyl4,panel = panel.smooth, main="MTCars data", col=11)
pairs(mtcar_cyl6,panel = panel.smooth, main="MTCars data", col=11)
pairs(mtcar_cyl8,panel = panel.smooth, main="MTCars data", col=11)
pairs(mtcar_cyl4,panel = panel.smooth, main="MTCars data", col=11)
pairs(mtcar_cyl6,panel = panel.smooth, main="MTCars data", col=11)
pairs(mtcar_cyl8,panel = panel.smooth, main="MTCars data", col=11)
lm(mpg ~ cyl)
lm(mpg ~ cyl,mtcars)
summary(lm(mpg ~ cyl,mtcars))$coef
mtcars$cyl
mtcars$cyl==6
sum(mtcars$cyl==6)
sum(mtcars$cyl==4)
sum(mtcars$cyl==8)
fit<-lm(mpg ~ cyl,mtcars)
summary(fit)
summary(lm(mpg ~ I(1*(mtcars$cyl==4)) + I(1*(mtcars$cyl==6)) + I(1*mtcars$cyl==8),mtcars))$coef
lm_cyl4 <- lm(mpg[cyl=4] ~ wt[am=0], mtcars)
lm_cyl4 <- lm(mpg[cyl==4] ~ wt[am==0], mtcars)
lm_cyl4 <- lm(mpg[cyl==4] ~ am, mtcars)
lm_cyl4 <- lm(mtcars$mpg[mtcars$cyl==4] ~ mtcars$am, mtcars)
lm_cyl4 <- lm(mtcars$mpg[mtcars$cyl==4] ~ mtcars$am[mtcars$cyl==4], mtcars)
lm_cyl4 <- lm(mpg[cyl==4] ~ am[cyl==4], mtcars)
summary(lm_cyl4)
mtcars$wt
average(mtcars$wt)
avg(mtcars$wt)
mean(mtcars$wt)
max(mtcars$wt)
min(mtcars$wt)
summary(mtcars$wt)
hist(mtcars$wt)
pairs(mtcars[mtcars$wt<3],panel = panel.smooth, main="MTCars data", col=11)
mtcars_light <- mtcars[which(mtcars$wt<3),]
pairs(mtcars_light,panel = panel.smooth, main="MTCars data", col=11)
data(mtcars)
mtcars_light <- mtcars[which(mtcars$wt<3),]
pairs(mtcars_light,panel = panel.smooth, main="MTCars data", col=11)
mtcars_light <- mtcars[which(mtcars$wt<3 && mtcars$gear==4),]
pairs(mtcars_light,panel = panel.smooth, main="MTCars data", col=11)
mtcars_light <- mtcars[which(mtcars$wt<3),]
pairs(mtcars_light,panel = panel.smooth, main="MTCars data", col=11)
mtcars_light$gear
mtcars_light <- mtcars[which(mtcars$wt<3 && mtcars$gear==4),]
mtcars_light$gear
mtcars_light
mtcars_light <- mtcars[which(mtcars$wt<3),]
mtcars_light <- mtcars_light[which(mtcars$gear==4),]
mtcars_light
pairs(mtcars_light,panel = panel.smooth, main="MTCars data", col=11)
mtcars_light <- mtcars[which(mtcars$wt<3),]
pairs(mtcars_light,panel = panel.smooth, main="MTCars data", col=11)
mtcars_light <- mtcars[which(mtcars$wt<4),]
pairs(mtcars_light,panel = panel.smooth, main="MTCars data", col=11)
pairs(mtcars,panel = panel.smooth, main="MTCars data", col=11)
fit<-lm(mpg~weight + am,mtcars)
fit<-lm(mpg~wt + am,mtcars)
summary(fit)
fit<-lm(mpg~wt + am + bear + cyl + carb,mtcars)
fit<-lm(mpg~wt + am + gear + cyl + carb,mtcars)
summary(fit)
fit<-lm(mpg~wt + am + gear + cyl + carb,mtcars)
summary(fit)
fit <- lm(mpg~factor(cyl1) + wt, mtcars)
fit <- lm(mpg~factor(cyl) + wt, mtcars)
summary(fit)
?rstandard
?rstudent
?hatvalues
require(stats)
require(graphics)
data(mtcars)
fit1 <- lm(mpg~factor(cyl1) + wt, dataset=mtcars)
fit1 <- lm(mpg~factor(cy1) + wt, dataset=mtcars)
fit1 <- lm(mpg~factor(cyl) + wt, dataset=mtcars)
fit1 <- lm(mpg ~ factor(cyl) + wt, data=mtcars)
fit2 <- lm(mpg ~ factor(cyl), data=mtcars)
summary(fit1)
summary(fit2)
install.packages("swirl")
library(swirl)
swirl()
lm(Fertility ~ ., data=Swiss)
lm(Fertility ~ ., data=swiss)
all <- lm(Fertility ~ ., data=swiss)
summary(all)
lm(Fertility ~ agriculture, data=swiss)
lm(Fertility ~ Agriculture, data=swiss)
summary(lm(Fertility ~ Agriculture, data=swiss))
cor(Examination, Education)
cor(Examination, Education, data=swiss)
cor()
cor(swiss, Examination, Education)
cor(swiss)
cor(swiss$examination, swiss$Education)
cor(swiss$Examination, swiss$Education)
cor(swiss$Agriculture, swiss$Education)
makelms()
ec <- sum(swiss$Examination, swiss$Catholic)
ec <- swiss$Examination +swiss$Catholic
efit <- lm(Fertility ~ . + ec)
efit <- lm(Fertility ~ . + ec, data=swiss)
fit - efit
all - efit
summary(efit)
all$coefficients-efit$coefficients
summary(InsetSprays)
4
6
dim(InsetSprays)
dim
dim(InsectSprays)
head(InsectSprays)
head(InsectSprays, 15)
sA
summary(InsectSpray[,2])
summary(InsectSprays[,2])
sapply(classes(InSectSprays))
x
3
sapply(InsectSprays, class)
fit <- lm(count ~ spray)
fit <- lm(count ~ spray, data=InsectSprays)
summary(fit$coef)
summary(fit)$coef
est <- summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit <- lm(count ~ spray - 1, data=InsectSprays)
summary(nfit)$coef
spray2 <- relevel(count, InscetSprays$sprayC)
spray2 <- relevel(Insectcount, InscetSprays$sprayC)
x
3
spray2 <- relevel(InsectSpray$spray,\"c\")
spray2 <- relevel(InsectSprays$spray,\"C\")
spray2 <- relevel(InsectSprays$spray,"C")
fit2 <- (Insectcount ~ ., data=spray2)
x
3
fit2 <- lm(count ~ spray2, InsectSprays)
summary(fit2)$coef
mean(sC)
3
(fit$coef[2] - fit$coef[3])/1.6011
dim(hunger)
948
names(hunger)
fit <- lm(Numeric ~ Year, data=hunger)
summary(fit)
summary(fit)$coef
lm(Numeric ~ Year, data=humger[hunger$Sex=="Female"])
lm(Numeric ~ Year, data=hunger[hunger$Sex=="Female"])
lm(Numeric ~ Year, data=hunger[hunger$Sex=="Female",])
lmF <- lm(hunger$Numeric[hunger$Sex=="Female"] ~ hunger$Year[hunger$Sex=="Female"])
lmM <- lm(Numeric[hunger$Sex=="Female"] ~ Year[hunger$Sex=="Female"], data=hunger)
lmM <- lm(Numeric[hunger$Sex=="Male"] ~ Year[hunger$Sex=="Male"], data=hunger)
lmBoth <- lm(Numeric ~ Year + Sex, data=hunger)
lmBoth
summary(lmBoth)
lmInter <- lm(Numeric ~ Year + Sex + Sex*Year, data=hunger)
summary(lmInter)
fit <- lm(y~x,out2)
plot(fit, which=1)
fitno <- lm(out2[-1,] ~ x)
3
fitno <- lm(y~x,data=out2[-1,])
plot(fitno, which=1)
coef(fitno) - coef(fit)
coef(fit) - coef(fitno)
head(dfbeta(fit))
resno <- out2[1,"y"] - predict(fitno, out2[1,])
1-resid(fit)[1]/resno
head(hatvalues(fit))
3
signa <- sqrt(deviance(fit)/df.residual(fit))
sigma <- sqrt(deviance(fit)/df.residual(fit))
e
3
rstd <- resid(fit)/(sigma * sqrt(1-hatvalues(fit)))
head(cbind(rstd,rstandard(fit)))
plot(fit,which=3)
plot(fit, which=2)
3
sigma <- sqrt(deviance(fitno)/df.residual(fitno))
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
3
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(f0t))
head(rstudent(fit))
3
dy <- predict(fitno, out)-predict(fit, out2)
dy <- predict(fitno, out2)-predict(fit, out2)
3
sum(dy^2)/(2*sigma^2)
plot(fit,which=5)
library(swirl)
swirl()
rgp1()
rgp2()
head(swiss)
3
mdl <- lm(Fertility ~ ., swiss)
vif(mdl)
3
mdl2 <- lm(Fertility~. -Examination, swiss)
vif(mdl2)
3
x1c <- simbias()
apply(x1c, 1, mean)
3
fit1 <- lm(Fertility ~ Agriculture, swiss)
fit3 <- lm(Fertility ~ Agriculture + Examination + Education, swiss)
anova(fit1, fit3)
3
deviance(fit3)
3
d <- deviance(fit3)/43
3
n <- (deviance(fit1) - deviance(fit3))/2
3
n/d
3
pf(n/d, 2, 43, lower.tail=FALSE)
3
shapiro.test(fit3$residuals)
3
anova(fit1, fit3, fit5, fit6)
install.packages("caret")
source('C:/Users/kasmith1/SkyDrive/Documents/Coursera/PracticalMachineLearning/Week2/Quiz2.R')
install.packages("AppliedPredictiveModeling")
source('C:/Users/kasmith1/SkyDrive/Documents/Coursera/PracticalMachineLearning/Week2/Quiz2.R')
version()
ver()
R.version
source('C:/Users/kasmith1/SkyDrive/Documents/Coursera/PracticalMachineLearning/Week2/Quiz2.R')
source('C:/Users/kasmith1/SkyDrive/Documents/Coursera/PracticalMachineLearning/Week2/Quiz2.R')
source('C:/Users/kasmith1/SkyDrive/Documents/Coursera/PracticalMachineLearning/Week2/Quiz2.R')
source('C:/Users/kasmith1/SkyDrive/Documents/Coursera/PracticalMachineLearning/Week2/Quiz2.R')
source('C:/Users/kasmith1/SkyDrive/Documents/Coursera/PracticalMachineLearning/Week2/Quiz2.R')
source('C:/Users/kasmith1/SkyDrive/Documents/Coursera/PracticalMachineLearning/Week2/Quiz2.R')
source('C:/Users/kasmith1/SkyDrive/Documents/Coursera/PracticalMachineLearning/Week2/Quiz2.R')
source('C:/Users/kasmith1/SkyDrive/Documents/Coursera/PracticalMachineLearning/Week2/Quiz2.R')
source('C:/Users/kasmith1/SkyDrive/Documents/Coursera/PracticalMachineLearning/Week2/Quiz2.R')
source('C:/Users/kasmith1/SkyDrive/Documents/Coursera/PracticalMachineLearning/Week2/Quiz2.R')
featurePlot(x=training2[, names], y=training2$CompressiveStrength, plot="pairs")
ggplot(data=training2, aes(x=index, y=CompressiveStrength)) + geom_point() + theme_bw()
source('C:/Users/kasmith1/SkyDrive/Documents/Coursera/PracticalMachineLearning/Week2/Quiz2.R')
source('C:/Users/kasmith1/SkyDrive/Documents/Coursera/PracticalMachineLearning/Week2/Quiz2.R')
install.packages("Hmisc")
source('C:/Users/kasmith1/SkyDrive/Documents/Coursera/PracticalMachineLearning/Week2/Quiz2.R')
library(cut2)
library(HMIsc)
library(hmisc)
library(Hmisc)
source('C:/Users/kasmith1/SkyDrive/Documents/Coursera/PracticalMachineLearning/Week2/Quiz2.R')
source('C:/Users/kasmith1/SkyDrive/Documents/Coursera/PracticalMachineLearning/Week2/Quiz2.R')
summary(cutCS)
ggplot(data=training2, aes(y=index, x=cutCS)) +geom_boxplot() + geom_jitter(col="blue") + theme_bw()
featurePlot(x=testing2[, names], y=testing2$CompressiveStrength, plot="pairs")
index <- seq_along(1:nrow(testing2))
ggplot(data=testing2, aes(x=index, y=CompressiveStrength)) + geom_point() + theme_bw()
cutCS <- cut2(training2$CompressiveStrength, g=4)
summary(cutCS)
ggplot(data=testing2, aes(y=index, x=cutCS)) +geom_boxplot() + geom_jitter(col="blue") + theme_bw()
index <- seq_along(1:nrow(testing2))
ggplot(data=testing2, aes(y=index, x=cutCS)) +geom_boxplot() + geom_jitter(col="blue") + theme_bw()
index
testing2
custCS<- cut2(testing2$CompressiveStrength, g=4)
ggplot(data=testing2, aes(y=index, x=cutCS)) +geom_boxplot() + geom_jitter(col="blue") + theme_bw()
summary(cutCS)
source('C:/Users/kasmith1/SkyDrive/Documents/Coursera/PracticalMachineLearning/Week2/Quiz2.R')
source('C:/Users/kasmith1/SkyDrive/Documents/Coursera/PracticalMachineLearning/Week2/Quiz2.R')
source('C:/Users/kasmith1/SkyDrive/Documents/Coursera/PracticalMachineLearning/Week3/Quiz3.R')
source('C:/Users/kasmith1/SkyDrive/Documents/Coursera/PracticalMachineLearning/Week3/Quiz3.R')
install.packages("rattle")
source('C:/Users/kasmith1/SkyDrive/Documents/Coursera/PracticalMachineLearning/Week3/Quiz3.R')
source('C:/Users/kasmith1/SkyDrive/Documents/Coursera/PracticalMachineLearning/Week3/Quiz3.R')
source('C:/Users/kasmith1/SkyDrive/Documents/Coursera/PracticalMachineLearning/Week3/Quiz3.R')
install.packages("pgmm")
source('C:/Users/kasmith1/SkyDrive/Documents/Coursera/PracticalMachineLearning/Week3/Quiz3.R')
source('C:/Users/kasmith1/SkyDrive/Documents/Coursera/PracticalMachineLearning/Week3/Quiz3.R')
View(newdata)
source('C:/Users/kasmith1/SkyDrive/Documents/Coursera/PracticalMachineLearning/Week3/Quiz3.R')
source('C:/Users/kasmith1/SkyDrive/Documents/Coursera/PracticalMachineLearning/Week3/Quiz3.R')
predict(model, newdata)
source('C:/Users/kasmith1/SkyDrive/Documents/Coursera/PracticalMachineLearning/Week3/Quiz3.R')
install.packages("ElemStatLearn")
source('C:/Users/kasmith1/SkyDrive/Documents/Coursera/PracticalMachineLearning/Week3/Quiz3.R')
source('C:/Users/kasmith1/SkyDrive/Documents/Coursera/PracticalMachineLearning/Week3/Quiz3.R')
source('C:/Users/kasmith1/SkyDrive/Documents/Coursera/PracticalMachineLearning/Week3/Quiz3.R')
missClass(trainSA$chd, predict(model, trainSA))
missClass(testSA$chd, predict(model, testSA))
source('C:/Users/kasmith1/SkyDrive/Documents/Coursera/PracticalMachineLearning/Week3/Quiz3.R')
source('C:/Users/kasmith1/SkyDrive/Documents/Coursera/PracticalMachineLearning/Week3/Quiz3.R')
library(randomForest)
source('C:/Users/kasmith1/SkyDrive/Documents/Coursera/PracticalMachineLearning/Week3/Quiz3.R')
order(imps)
source('C:/Users/kasmith1/SkyDrive/Documents/Coursera/PracticalMachineLearning/Week4/Quiz4.R')
install.packages("gbm")
source('C:/Users/kasmith1/SkyDrive/Documents/Coursera/PracticalMachineLearning/Week4/Quiz4.R')
print(paste(c1$overall[1], c2$overall[1], c3$overall[1], c4$overall[1]))
devtools::install_github('rstudio/shinyapps')
find_rtools()
library(devtools)
find_rtools()
library('slidify')
slidify('index.rmd')
library(slidify)
slidify('index.rmd')
setwd("C:/Users/kasmith1/SkyDrive/Documents/Coursera/DevelopDataProducts/Week3/Project/publishToGithub/keiths5.github.io")
slidify('index.rmd')
